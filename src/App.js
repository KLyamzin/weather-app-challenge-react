import 'bootstrap/dist/css/bootstrap.min.css';
import { useEffect } from 'react';
import { useState } from 'react';
import {
  Navbar,
  Container,
  Form,
  Button,
  Table,
  Card,
  Row,
} from 'react-bootstrap';
import { LinkContainer } from 'react-router-bootstrap';
import { BrowserRouter, Router, Routes } from 'react-router-dom';
import Temperature from './components/Temperature';
import LocationApiCall from './utils/LocationApiCall';
import ResolveSearchInput from './utils/ResolveSearchInput';
import WeatherApiCall from './utils/WeatherApiCall';

function App() {
  // current input data
  const [location, setLocation] = useState('');
  const [weather, setWeather] = useState({
    latitude: 40.625,
    longitude: -74.0,
    generationtime_ms: 1.1229515075683594,
    utc_offset_seconds: -18000,
    timezone: 'America/New_York',
    timezone_abbreviation: 'EST',
    elevation: 19.0,
    current_weather: {
      temperature: 50.0,
      windspeed: 4.3,
      winddirection: 96.0,
      weathercode: 0,
      time: '2022-11-09T12:00',
    },
    hourly_units: {
      time: 'iso8601',
      temperature_2m: '°F',
      relativehumidity_2m: '%',
      precipitation: 'inch',
      weathercode: 'wmo code',
    },
    hourly: {
      time: [
        '2022-11-09T00:00',
        '2022-11-09T01:00',
        '2022-11-09T02:00',
        '2022-11-09T03:00',
        '2022-11-09T04:00',
        '2022-11-09T05:00',
        '2022-11-09T06:00',
        '2022-11-09T07:00',
        '2022-11-09T08:00',
        '2022-11-09T09:00',
        '2022-11-09T10:00',
        '2022-11-09T11:00',
        '2022-11-09T12:00',
        '2022-11-09T13:00',
        '2022-11-09T14:00',
        '2022-11-09T15:00',
        '2022-11-09T16:00',
        '2022-11-09T17:00',
        '2022-11-09T18:00',
        '2022-11-09T19:00',
        '2022-11-09T20:00',
        '2022-11-09T21:00',
        '2022-11-09T22:00',
        '2022-11-09T23:00',
        '2022-11-10T00:00',
        '2022-11-10T01:00',
        '2022-11-10T02:00',
        '2022-11-10T03:00',
        '2022-11-10T04:00',
        '2022-11-10T05:00',
        '2022-11-10T06:00',
        '2022-11-10T07:00',
        '2022-11-10T08:00',
        '2022-11-10T09:00',
        '2022-11-10T10:00',
        '2022-11-10T11:00',
        '2022-11-10T12:00',
        '2022-11-10T13:00',
        '2022-11-10T14:00',
        '2022-11-10T15:00',
        '2022-11-10T16:00',
        '2022-11-10T17:00',
        '2022-11-10T18:00',
        '2022-11-10T19:00',
        '2022-11-10T20:00',
        '2022-11-10T21:00',
        '2022-11-10T22:00',
        '2022-11-10T23:00',
        '2022-11-11T00:00',
        '2022-11-11T01:00',
        '2022-11-11T02:00',
        '2022-11-11T03:00',
        '2022-11-11T04:00',
        '2022-11-11T05:00',
        '2022-11-11T06:00',
        '2022-11-11T07:00',
        '2022-11-11T08:00',
        '2022-11-11T09:00',
        '2022-11-11T10:00',
        '2022-11-11T11:00',
        '2022-11-11T12:00',
        '2022-11-11T13:00',
        '2022-11-11T14:00',
        '2022-11-11T15:00',
        '2022-11-11T16:00',
        '2022-11-11T17:00',
        '2022-11-11T18:00',
        '2022-11-11T19:00',
        '2022-11-11T20:00',
        '2022-11-11T21:00',
        '2022-11-11T22:00',
        '2022-11-11T23:00',
        '2022-11-12T00:00',
        '2022-11-12T01:00',
        '2022-11-12T02:00',
        '2022-11-12T03:00',
        '2022-11-12T04:00',
        '2022-11-12T05:00',
        '2022-11-12T06:00',
        '2022-11-12T07:00',
        '2022-11-12T08:00',
        '2022-11-12T09:00',
        '2022-11-12T10:00',
        '2022-11-12T11:00',
        '2022-11-12T12:00',
        '2022-11-12T13:00',
        '2022-11-12T14:00',
        '2022-11-12T15:00',
        '2022-11-12T16:00',
        '2022-11-12T17:00',
        '2022-11-12T18:00',
        '2022-11-12T19:00',
        '2022-11-12T20:00',
        '2022-11-12T21:00',
        '2022-11-12T22:00',
        '2022-11-12T23:00',
        '2022-11-13T00:00',
        '2022-11-13T01:00',
        '2022-11-13T02:00',
        '2022-11-13T03:00',
        '2022-11-13T04:00',
        '2022-11-13T05:00',
        '2022-11-13T06:00',
        '2022-11-13T07:00',
        '2022-11-13T08:00',
        '2022-11-13T09:00',
        '2022-11-13T10:00',
        '2022-11-13T11:00',
        '2022-11-13T12:00',
        '2022-11-13T13:00',
        '2022-11-13T14:00',
        '2022-11-13T15:00',
        '2022-11-13T16:00',
        '2022-11-13T17:00',
        '2022-11-13T18:00',
        '2022-11-13T19:00',
        '2022-11-13T20:00',
        '2022-11-13T21:00',
        '2022-11-13T22:00',
        '2022-11-13T23:00',
        '2022-11-14T00:00',
        '2022-11-14T01:00',
        '2022-11-14T02:00',
        '2022-11-14T03:00',
        '2022-11-14T04:00',
        '2022-11-14T05:00',
        '2022-11-14T06:00',
        '2022-11-14T07:00',
        '2022-11-14T08:00',
        '2022-11-14T09:00',
        '2022-11-14T10:00',
        '2022-11-14T11:00',
        '2022-11-14T12:00',
        '2022-11-14T13:00',
        '2022-11-14T14:00',
        '2022-11-14T15:00',
        '2022-11-14T16:00',
        '2022-11-14T17:00',
        '2022-11-14T18:00',
        '2022-11-14T19:00',
        '2022-11-14T20:00',
        '2022-11-14T21:00',
        '2022-11-14T22:00',
        '2022-11-14T23:00',
        '2022-11-15T00:00',
        '2022-11-15T01:00',
        '2022-11-15T02:00',
        '2022-11-15T03:00',
        '2022-11-15T04:00',
        '2022-11-15T05:00',
        '2022-11-15T06:00',
        '2022-11-15T07:00',
        '2022-11-15T08:00',
        '2022-11-15T09:00',
        '2022-11-15T10:00',
        '2022-11-15T11:00',
        '2022-11-15T12:00',
        '2022-11-15T13:00',
        '2022-11-15T14:00',
        '2022-11-15T15:00',
        '2022-11-15T16:00',
        '2022-11-15T17:00',
        '2022-11-15T18:00',
        '2022-11-15T19:00',
        '2022-11-15T20:00',
        '2022-11-15T21:00',
        '2022-11-15T22:00',
        '2022-11-15T23:00',
      ],
      temperature_2m: [
        47.8, 46.7, 45.8, 44.9, 44.2, 43.5, 43.0, 42.6, 43.0, 44.6, 46.5, 48.5,
        50.0, 50.8, 51.1, 50.9, 50.7, 50.7, 50.8, 51.5, 51.9, 52.3, 52.3, 51.9,
        51.0, 50.4, 49.7, 48.9, 48.9, 49.2, 49.3, 49.5, 50.4, 52.2, 54.4, 56.7,
        58.8, 60.4, 61.1, 61.1, 60.4, 59.4, 58.8, 58.8, 58.7, 58.7, 58.8, 58.8,
        59.0, 59.3, 59.8, 58.7, 58.0, 58.9, 58.9, 59.3, 60.6, 63.2, 65.0, 66.1,
        66.1, 66.0, 66.0, 65.5, 65.2, 65.0, 65.3, 65.6, 65.5, 65.7, 66.3, 66.4,
        66.6, 67.0, 67.5, 67.9, 67.8, 68.4, 68.0, 67.7, 66.9, 67.7, 68.4, 69.2,
        69.6, 69.6, 69.4, 68.8, 67.7, 66.4, 64.8, 62.7, 61.4, 60.0, 58.7, 58.3,
        58.4, 57.9, 56.5, 54.7, 52.5, 51.1, 49.8, 48.6, 48.0, 47.6, 47.8, 48.9,
        50.7, 52.5, 52.7, 52.5, 51.7, 50.7, 49.3, 47.5, 46.2, 45.1, 43.6, 42.7,
        41.8, 40.9, 40.5, 40.1, 39.8, 39.3, 39.0, 38.8, 39.1, 39.9, 41.1, 42.4,
        43.7, 45.3, 46.0, 46.4, 46.7, 46.8, 46.7, 46.3, 45.9, 45.3, 44.4, 43.8,
        43.3, 42.6, 42.4, 42.3, 42.2, 41.9, 41.7, 41.7, 42.4, 43.5, 44.9, 46.1,
        47.3, 48.6, 48.8, 48.7, 48.8, 49.6, 50.7, 51.8, 52.0, 51.9, 51.7, 51.8,
      ],
      relativehumidity_2m: [
        44, 43, 45, 46, 47, 49, 52, 54, 55, 50, 47, 44, 45, 47, 52, 60, 66, 70,
        71, 71, 73, 73, 77, 75, 78, 79, 83, 84, 84, 85, 86, 86, 83, 76, 70, 66,
        63, 62, 62, 66, 73, 81, 87, 89, 89, 90, 89, 89, 88, 88, 89, 92, 94, 93,
        94, 93, 92, 86, 83, 81, 82, 84, 84, 87, 89, 91, 92, 92, 93, 95, 96, 96,
        96, 94, 93, 90, 88, 84, 82, 76, 66, 65, 61, 57, 56, 55, 54, 54, 55, 57,
        61, 64, 64, 63, 61, 60, 60, 61, 64, 69, 74, 76, 78, 78, 77, 75, 71, 65,
        58, 50, 46, 44, 43, 44, 47, 50, 50, 50, 51, 54, 57, 62, 64, 66, 68, 68,
        67, 65, 62, 59, 54, 51, 48, 44, 42, 40, 39, 39, 41, 43, 46, 49, 53, 54,
        54, 55, 59, 64, 70, 72, 73, 72, 69, 65, 60, 59, 59, 61, 64, 67, 71, 72,
        72, 72, 73, 75, 77, 78,
      ],
      precipitation: [
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004, 0.0, 0.016, 0.051, 0.059, 0.031,
        0.035, 0.043, 0.0, 0.004, 0.0, 0.0, 0.0, 0.008, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.004, 0.004, 0.004, 0.035, 0.035, 0.035, 0.016, 0.016,
        0.016, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.004, 0.004, 0.004, 0.0,
      ],
      weathercode: [
        0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 1, 2, 1, 2, 1,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 1, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 80, 80, 80, 95, 95, 80,
        3, 3, 3, 3, 3, 80, 3, 3, 3, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 3, 3,
        3, 3, 3, 3, 61, 61, 61, 61, 61, 61, 3, 3, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        61, 61, 61, 61,
      ],
    },
    daily_units: {
      time: 'iso8601',
      weathercode: 'wmo code',
      temperature_2m_max: '°F',
      temperature_2m_min: '°F',
      precipitation_sum: 'inch',
    },
    daily: {
      time: [
        '2022-11-09',
        '2022-11-10',
        '2022-11-11',
        '2022-11-12',
        '2022-11-13',
        '2022-11-14',
        '2022-11-15',
      ],
      weathercode: [2, 3, 95, 80, 61, 3, 61],
      temperature_2m_max: [52.3, 61.1, 66.4, 69.6, 58.4, 46.8, 52.0],
      temperature_2m_min: [42.6, 48.9, 58.0, 58.3, 42.7, 38.8, 41.7],
      precipitation_sum: [0.0, 0.0, 0.24, 0.01, 0.17, 0.0, 0.01],
    },
  });
  const [locationName, setLocationName] = useState('');

  //get the lat & long parameters and get weather data object
  const getLatAndLonParameters = async () => {
    // get the location parameter for initial API call to get lat. & lon.
    const searchParameter = ResolveSearchInput(location); // returns something like: name=11234
    try {
      let data = await LocationApiCall(searchParameter);
      await WeatherApiCall(data).then((object) => setWeather(object));
      setLocationName(data.name);
      // console.log(locationName);
    } catch (error) {
      console.log(error);
    }
  };
  // call API to get weather
  const getWeather = (e) => {
    e.preventDefault();
    getLatAndLonParameters();
  };
  useEffect(() => {
    getLatAndLonParameters();
  }, []);

  return (
    <BrowserRouter>
      <div className="d-flex flex-column app-container">
        <header>
          <Navbar bg="dark" variant="dark" expand="lg">
            <Container fluid>
              <LinkContainer to="/">
                <Navbar.Brand>Weather App</Navbar.Brand>
              </LinkContainer>
              <Navbar.Toggle aria-controls="navbarSearch" />
              <Navbar.Collapse id="navbarSearch" className="my-2">
                <Form className="d-flex ms-auto" onSubmit={getWeather}>
                  <Form.Control
                    type="search"
                    placeholder="Search"
                    className="me-2"
                    aria-label="Search"
                    value={location}
                    onChange={(e) => setLocation(e.target.value)}
                  />
                  <Button variant="outline-success" type="submit">
                    Search
                  </Button>
                </Form>
              </Navbar.Collapse>
            </Container>
          </Navbar>
        </header>
        <main>
          <Container fluid className="px-1 px-md-4 py-5 mx-auto">
            <Row className="row d-flex flex-end px-3">
              <Card>
                <Card.Body className="ms-auto me-4 mt-3 mb-0">
                  <Card.Title>{locationName}</Card.Title>
                  <Temperature weather={weather} />
                </Card.Body>
              </Card>
            </Row>
          </Container>
        </main>
        <footer className="text-center">
          <a href="https://github.com/KLyamzin/weather-app-challenge-react">
            GitHub Repo.
          </a>
        </footer>
      </div>
    </BrowserRouter>
  );
}

export default App;
